"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const debug_1 = __importDefault(require("debug"));
const depcheck_1 = __importDefault(require("depcheck"));
const index_1 = require("../index");
const displayAsTree_1 = __importDefault(require("./functions/displayAsTree"));
const logger = debug_1.default(`${index_1.name}:depcheck`);
async function checkDeps() {
    console.log(`${index_1.dsConsolePrefix} ${chalk_1.default.hex("#ebc14d")("Checking dependenciesâ€¦")}`);
    logger("Running dependency check...");
    const deps = await depcheck_1.default(process.cwd(), { ignoreDirs: [index_1.config.out] });
    logger(`Dependency check finished. ${deps.dependencies.length + deps.devDependencies.length} unused, ${Object.keys(deps.missing).length} missing`);
    if (Object.keys(deps.missing).length > 0)
        displayAsTree_1.default(`${index_1.dsConsolePrefix} ${chalk_1.default.red(chalk_1.default.bold("Missing dependencies"))}`, Object.keys(deps.missing), chalk_1.default.red);
    if (deps.dependencies.length > 0)
        displayAsTree_1.default(`${index_1.dsConsolePrefix} ${chalk_1.default.bold(chalk_1.default.yellowBright("Unused dependencies"))}`, deps.dependencies, chalk_1.default.yellowBright);
    if (deps.devDependencies.length > 0)
        displayAsTree_1.default(`${index_1.dsConsolePrefix} ${chalk_1.default.hex("#ea5e00")(chalk_1.default.bold("Unused devDependencies"))}`, deps.devDependencies, chalk_1.default.hex("#e8811c"));
}
exports.default = checkDeps;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwQ2hlY2suanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInV0aWwvZGVwQ2hlY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsa0RBQTBCO0FBQzFCLHdEQUFnQztBQUVoQyxvQ0FBeUQ7QUFDekQsOEVBQXNEO0FBRXRELE1BQU0sTUFBTSxHQUFHLGVBQUssQ0FBQyxHQUFHLFlBQUksV0FBVyxDQUFDLENBQUM7QUFFMUIsS0FBSyxVQUFVLFNBQVM7SUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FDVixHQUFHLHVCQUFlLElBQUksZUFBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLENBQ3RFLENBQUM7SUFDRixNQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUN0QyxNQUFNLElBQUksR0FBRyxNQUFNLGtCQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsY0FBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6RSxNQUFNLENBQ0wsOEJBQ0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUNqRCxZQUFZLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sVUFBVSxDQUN0RCxDQUFDO0lBRUYsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztRQUN2Qyx1QkFBYSxDQUNaLEdBQUcsdUJBQWUsSUFBSSxlQUFLLENBQUMsR0FBRyxDQUFDLGVBQUssQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxFQUFFLEVBQ3JFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUN6QixlQUFLLENBQUMsR0FBRyxDQUNULENBQUM7SUFFSCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUM7UUFDL0IsdUJBQWEsQ0FDWixHQUFHLHVCQUFlLElBQUksZUFBSyxDQUFDLElBQUksQ0FDL0IsZUFBSyxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxDQUN6QyxFQUFFLEVBQ0gsSUFBSSxDQUFDLFlBQVksRUFDakIsZUFBSyxDQUFDLFlBQVksQ0FDbEIsQ0FBQztJQUVILElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQztRQUNsQyx1QkFBYSxDQUNaLEdBQUcsdUJBQWUsSUFBSSxlQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUN6QyxlQUFLLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQ3BDLEVBQUUsRUFDSCxJQUFJLENBQUMsZUFBZSxFQUNwQixlQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUNwQixDQUFDO0FBQ0osQ0FBQztBQXBDRCw0QkFvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSBcImNoYWxrXCI7XG5pbXBvcnQgZGVidWcgZnJvbSBcImRlYnVnXCI7XG5pbXBvcnQgZGVwY2hlY2sgZnJvbSBcImRlcGNoZWNrXCI7XG5cbmltcG9ydCB7IGNvbmZpZywgZHNDb25zb2xlUHJlZml4LCBuYW1lIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5pbXBvcnQgZGlzcGxheUFzVHJlZSBmcm9tIFwiLi9mdW5jdGlvbnMvZGlzcGxheUFzVHJlZVwiO1xuXG5jb25zdCBsb2dnZXIgPSBkZWJ1ZyhgJHtuYW1lfTpkZXBjaGVja2ApO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBjaGVja0RlcHMoKSB7XG5cdGNvbnNvbGUubG9nKFxuXHRcdGAke2RzQ29uc29sZVByZWZpeH0gJHtjaGFsay5oZXgoXCIjZWJjMTRkXCIpKFwiQ2hlY2tpbmcgZGVwZW5kZW5jaWVz4oCmXCIpfWBcblx0KTtcblx0bG9nZ2VyKFwiUnVubmluZyBkZXBlbmRlbmN5IGNoZWNrLi4uXCIpO1xuXHRjb25zdCBkZXBzID0gYXdhaXQgZGVwY2hlY2socHJvY2Vzcy5jd2QoKSwgeyBpZ25vcmVEaXJzOiBbY29uZmlnLm91dF0gfSk7XG5cdGxvZ2dlcihcblx0XHRgRGVwZW5kZW5jeSBjaGVjayBmaW5pc2hlZC4gJHtcblx0XHRcdGRlcHMuZGVwZW5kZW5jaWVzLmxlbmd0aCArIGRlcHMuZGV2RGVwZW5kZW5jaWVzLmxlbmd0aFxuXHRcdH0gdW51c2VkLCAke09iamVjdC5rZXlzKGRlcHMubWlzc2luZykubGVuZ3RofSBtaXNzaW5nYFxuXHQpO1xuXG5cdGlmIChPYmplY3Qua2V5cyhkZXBzLm1pc3NpbmcpLmxlbmd0aCA+IDApXG5cdFx0ZGlzcGxheUFzVHJlZShcblx0XHRcdGAke2RzQ29uc29sZVByZWZpeH0gJHtjaGFsay5yZWQoY2hhbGsuYm9sZChcIk1pc3NpbmcgZGVwZW5kZW5jaWVzXCIpKX1gLFxuXHRcdFx0T2JqZWN0LmtleXMoZGVwcy5taXNzaW5nKSxcblx0XHRcdGNoYWxrLnJlZFxuXHRcdCk7XG5cblx0aWYgKGRlcHMuZGVwZW5kZW5jaWVzLmxlbmd0aCA+IDApXG5cdFx0ZGlzcGxheUFzVHJlZShcblx0XHRcdGAke2RzQ29uc29sZVByZWZpeH0gJHtjaGFsay5ib2xkKFxuXHRcdFx0XHRjaGFsay55ZWxsb3dCcmlnaHQoXCJVbnVzZWQgZGVwZW5kZW5jaWVzXCIpXG5cdFx0XHQpfWAsXG5cdFx0XHRkZXBzLmRlcGVuZGVuY2llcyxcblx0XHRcdGNoYWxrLnllbGxvd0JyaWdodFxuXHRcdCk7XG5cblx0aWYgKGRlcHMuZGV2RGVwZW5kZW5jaWVzLmxlbmd0aCA+IDApXG5cdFx0ZGlzcGxheUFzVHJlZShcblx0XHRcdGAke2RzQ29uc29sZVByZWZpeH0gJHtjaGFsay5oZXgoXCIjZWE1ZTAwXCIpKFxuXHRcdFx0XHRjaGFsay5ib2xkKFwiVW51c2VkIGRldkRlcGVuZGVuY2llc1wiKVxuXHRcdFx0KX1gLFxuXHRcdFx0ZGVwcy5kZXZEZXBlbmRlbmNpZXMsXG5cdFx0XHRjaGFsay5oZXgoXCIjZTg4MTFjXCIpXG5cdFx0KTtcbn1cbiJdfQ==